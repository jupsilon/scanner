#!/usr/local/bin/sbcl --script

(load "~/.sbclrc")

(require :cl-ppcre)
(require :cl-sxml)

(defun concat (&rest args)
  (apply #'concatenate (cons 'string args)))

(defun << (&rest args)
  (dolist (item args)
    (princ item))
  (terpri))

(defun preprocess (protocol)
	   (remove-if (lambda (item) (if (stringp item) (not (null (ppcre:scan "^\\s+$" item)))))
		      (mapcar (lambda (item)
				(cond ((listp item) (preprocess item))
				      (t item)))
			      protocol)))

(defun attribute (list key)
  (cdr (assoc key
	      (mapcar (lambda (item)
			(unless (= (length item) 2) (error "bad attributes"))
			(cons (car item) (cadr item))) list)
	      :test #'string=)))

(defun desc (description)
  (unless (string= (car description) "description") nil)
  (let ((summary (attribute (cadr description) "summary"))
	(text    (elt description 2)))
    (values summary text)))

(defun trim-note (note)
  (remove-if (lambda (line) (string= line ""))
	     (mapcar (lambda (line) (ppcre:regex-replace "^\\s+" line ""))
		     (ppcre:split "\\n" note))))

(defun emit-client-interface (interface)
  (unless (string= (car interface) "interface") (error "interface missing"))
  (let ((name        (attribute (cadr  interface) "name"))
	(version     (attribute (cadr  interface) "version")))
    (let* ((class (concat name "_t"))
	   (base-class (concat "wl_proxy_core<" class ", " version ">")))
      (multiple-value-bind (brief note) (desc (caddr interface))
	(when (not (null brief))
	  (<< "  /// @class " class)
	  (<< "  /// @brief " brief))
	(when (not (null note))
	  (let ((lines (trim-note note))) (<< "  /// @note  " (car lines))
	    (dolist (line (cdr lines))    (<< "  ///        " line)))))
      (<< "  class " class " : public " base-class " {" )
      (<< "  public:"                                   )
      (<< "    using protocol_type = " name ";"         )
      (<< "    using base_type     = " base-class ";"   )
      (<< ""                                            )
      (<< "  public:"                                   )
      (<< "    " class "(protocol_type* src = nullptr)" )
      (<< "      : base_typeo(src)"                     )
      (<< "    {"                                       )
      (<< "    }"                                       )
      (<< "  };"                                        )
      (terpri))))

(defun emit-client-interfaces (interfaces)
  (dolist (interface interfaces)
    (emit-client-interface interface)))

(defun emit-client-namespace (interfaces protocol-name)
  (terpri)
  (<< "namespace " protocol-name "_client")
  (<< "{"                                 )
  (emit-client-interfaces interfaces)
  (<< "}"                                 )
  (terpri))

(defun emit-client-include-guard (interfaces protocol-name)
  (let ((cap-name (string-upcase protocol-name)))
    (<< "#ifndef INCLUDE_" cap-name "_CLIENT_H_")
    (<< "#define INCLUDE_" cap-name "_CLIENT_H_")
    (emit-client-namespace interfaces protocol-name)
    (<< "#endif/*INCLUDE_" cap-name "_CLIENT_H_*/")))

(defun emit-root (root)
  (unless (string= (car root) "protocol") (error "protocol missing"))
  (let ((protocol-name (attribute (cadr root) "name"))
	(interfaces (cddr root)))
    (emit-client-include-guard interfaces protocol-name)))

(let ((root (preprocess (cxml:parse *standard-input* (cxml-xmls:make-xmls-builder)))))
  (emit-root root))
